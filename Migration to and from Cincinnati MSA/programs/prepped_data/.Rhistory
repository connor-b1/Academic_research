#question 1:
y <- c(1:15)
#what type of number is in our vector y? integer
#now convert to the opposite type
#question 2: sequences
#create a sequence between 100 and 400
seq(100:400)
class(y)
typeof(y)
as.double(y)
#create the same sequence but this time make sure to increment by 100
seq(100:400, by =  100)
#create the same sequence but this time make sure to increment by 100
seq(100:400, by = 100)
#create the same sequence but this time make sure to increment by 100
seq(from = 100, to =400, by = 100)
#create four equal increments of the sequence 100 to 400
seq(from = 100, to = 400, length = 4)
#Question 3: repetition
#generate the numbers 1 to 100, 10 times
rep(1:100, 10)
#create four equal increments of the sequence 100 to 400
seq(from = 100, to = 400, times = 4)
#create four equal increments of the sequence 100 to 400
seq(from = 100, to = 4000, length.out = 4)
# now, arrange the vector in an uncollated fashion
rep(1:100, each = 10)
runif(n)
n <- 10
runif(n)
round(runif(n, min = 0, max = 50),0)
# generate n random numbers between 0 and 50 (without replacement)
sample(0:10, n, replace = FALSE)
# for instance, if we want to randomly generate 10 values from a normal distrubtion in a
set.seed(7)
rnorm(n = 10, mean = 144, sd= 12)
x <- rand_nums
rnorm(n, mean=0, sd=1)
rand_nums <- rnorm(n, mean=0, sd=1)
set.seed(7)
rnorm(100, mean=0, sd=1)
set.seed(7)
numbers
numbers <- rnorm(100, mean=0, sd=1)
numbers
x < y # is
greeting <- "Hello,"
name <- "Connor"
paste(greeting, name)
paste("the life of", pi)
# paste with separator
paste("I", "love", "R", sep = "-")
a <- "the like of"
b <- pi
# is a a string
is.character(a)
is.numeric(a)
# is b a string
is.character(b)
is.numeric(b)
#convert b to a character by
c <- as.character(b)
is.character(c)
C
#creating a string with numbers and character values
toString(c("Aug", 24, 1980))
letters
letras
library("dbplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("dbplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library"
library(dbplyr)
library(dplyr)
library("tidyverse", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(dplyr)
# Reading in CSV files
read_csv("data/mydata.csv")
read_csv("data/mydata.csv")
library(readr)
install.packages(readr)
read_csv("data/mydata.csv")
load("~/Downloads/ECON8010RExercise2Arent.RData")
attach(data)
attach(Housing)
rentdata <- lm(rent ~ Housing$hsngval + Housing$pop + Housing$faminc + Housing$pcturban)
summary(rentdata)
install.packages(leaflet)
install.package(leaflet)
install.packages(leaflet)
---
title: "Untitled"
author: "connor"
date: "29/10/2018"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Untitled"
author: "connor"
date: "29/10/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Header 1
## Header 2
**bold**
*italics*
y = mx + b^2
* grocery list
+ milk
+ eggs
+ bread
1. Go to Kroger
2. Get haircut
3. Get flu shot
[good food] (skylinechili.com)
***
* grocery list
+ milk
+ eggs
+ bread
```{r}
# Header 1
## Header 2
**bold**
*italics*
y = mx + b^2
* grocery list
+ milk
+ eggs
+ bread
1. Go to Kroger
2. Get haircut
3. Get flu shot
[good food] (skylinechili.com)
***
```
library(tidyverse)
library(tidyverse)
library(tidyverse)
inspect(iris)
View(iris)
?avg
??avg
library(iris)
data(iris)
library(dplyr)
View(iris)
average_sepal <- summarize(m = mean(iris$Sepal.Length))
average_sepal <- mean(iris$Sepal.Length)
average_sepal
The average sepal width in the data set is 'average_sepal'
library(tidyverse)
head(iris)
iris %>%
select(Species, Width = Sepal.Width, Length = Sepal.Length) %>%
head()
iris %>%
rename(Sepal.X = Sepal.Width, Sepal.Y = Sepal.Length) %>%
head()
install.packages("nycflights13")
library("nycflights13")
example_data <- nycflights13::flights
glimpse(example_data)
View(example_data)
select(carrier, starts_with("IB"))
select(flights, starts_with("IB"))
glimpse()
iris %>%
iris %>%
select(starts_with("Petal") %>%
glimpse()
glimpse()
iris %>%
select(contains("Petal")) %>%
glimpse()
siris<- iris %>%
select(contains("Petal")) %>%
iris %>%
select(contains("Petal")) %>%
select(contains("versicolor")) %>%
glimpse()
iris %>%
select(contains("Petal")) %>%
select(matches("versicolor")) %>%
glimpse()
iris %>%
select(contains("Petal")) %>%
filter(Species == "versicolor") %>%
glimpse()
iris %>%
select(contains("Petal")) %>%
filter(Sepal.Width > 3, Species == "versicolor") %>%
glimpse()
iris %>%
select(starts_with("Petal")) %>%
filter(Species == "versicolor") %>%
glimpse()
iris %>%
filter(Species == "versicolor") %>%
select(starts_with("Petal"))
iris %>%
select(ends_with("Width")) %>%
summarise(sepal_length = max(sepal.length), petal_max = max(Petal.Width))
nycflights13::flights %>%
select(starts_with("DA")) %>%
head()
nycflights13::flights %>%
select(starts_with("IB")) %>%
head()
?vars
iris %>%
summarise_at(vars(contains("Width")), funs(max, lowest = min))
iris %>%
mutate_if(is.numeric, round)
iris %>%
mutate_if(is.factor, toupper)
messy_iris %>%
filter_if(is.numeric, all_vars(!is.na(. > 2)))
#Filter the iris data down to rows that contains both “Width” measurements that are above 2.0.
library(messy_iris)
#Filter the iris data down to rows that contains both “Width” measurements that are above 2.0.
install.packages(messy_iris)
iris %>%
filter_if(is.numeric, all_vars(!is.na(. > 2)))
messy_iris %>%
filter_if(is.numeric, all_vars(!is.na(. < 1)))
iris %>%
filter_if(is.numeric, all_vars(!is.na(. < 1)))
iris %>%
filter_if(is.numeric, Width(!is.na(. > 2)))
filter_if(vars(ends_with("Width")(!is.na(. > 2)))
filter_if(vars(ends_with("Width")(!is.na(. > 2))
filter_if(vars(ends_with("Width"), !is.na(. > 2))
iris %>%
filter_at(vars(ends_with("Width")), all_vars(. > 2))
iris %>%
filter_at(vars(ends_with("Width")), all_vars(. > 2))
iris %>%
filter_if(is.numeric, any_vars(. < 1))
library(tidyverse)
diamonds <- diamonds
summary(diamonds)
# ALWAYS look at the distribution of your target variable, this helps you decide if you want to consider transforming the variable
ggplot(diamonds, aes(x = price)) + geom_histogram()
# looking for outliers:
ggplot(diamonds, aes(color, price)) + geom_boxplot()
IQR(diamonds$price, 2)
diamonds %>% select(price, carat) %>% filter(price <= 3 * IQR(diamonds$price,2)) %>% ggplot(aes(carat, price)) + geom_point()
diamonds %>% filter(price <= 1.5 * IQR(diamonds$price,2)) %>% ggplot(aes(carat, price)) + geom_point()
diamonds %>% select(price, carat) %>% filter(price <= 3 * IQR(diamonds$price,2)) %>% ggplot(aes(carat, price)) + geom_point()
diamonds %>% filter(price <= 1.5 * IQR(diamonds$price,2)) %>% ggplot(aes(carat, price)) + geom_point()
winzorize <- function(x,prob=.99) {
value_99 <- quantile(x, probs = .99)
for (i in 1:length(x)){
x[i] <- ifelse(x[i] > value_99, value_99, x[i])
}
return(as.data.frame(x))
}
# since our function will only work on numeric data, let's create an object of only numeric columns
numeric_vars <- select_if(diamonds, is.numeric)
# create list of columns to pass to the function
vars <- colnames(numeric_vars)
# now run the function
for (i in 1:length(numeric_vars)) {
numeric_vars[,vars[i]] <- winzorize(as.matrix(numeric_vars[,vars[i]]))
}
# compare summaries for columns in both to make sure it worked
summary(diamonds)
summary(numeric_vars)
# get the non-numeric columns in a seperate object, here we select cut, color, and clarity
non_numeric <- diamonds %>% select(2:4)
# combine our winsorized columns with the non-numeric data
diamonds2 <- cbind(numeric_vars, non_numeric)
smp_size <- floor(0.8* nrow(diamonds2))
set.seed(77)
train_ind <- sample(seq_len(nrow(diamonds2)), size = smp_size)
train <- diamonds2[train_ind, ]
test <- diamonds2[-train_ind, ]
set.seed(77)
diamonds2 %>% sample_n(size = (0.8 * nrow(diamonds)))
price_carat_model <- lm(data = train, price ~ carat)
summary(price_carat_model)
pcm_residuals <- price_carat_model$residuals
mse_pcm <- mean(pcm_residuals ^ 2)
mse_pcm
setwd("~/Desktop/econ/github/ECON-6010-Group-Project/programs/prepped_data")
load("modeling_df.rda")
correlation_kosher <- c("cbsatitle", "year", "total_mig_in", "total_mig_out", "pop_rank", "non_us_citizens", "us_citizens", "income_rank", "msa_code", "geo.y")
modeling_num_corr <- modeling_df[ , !(names(modeling_df) %in% correlation_kosher)]
modeling_matrix <- data.matrix(modeling_num_corr, rownames.force = NA)
correlation_matrix <- cor(modeling_matrix)
corrplot(correlation_matrix, method="circle")
require(tidyverse)
require(corrplot)
install.packages(corrplot)
install.package(corrplot)
install.packages(corrplot)
require(tidyverse)
install.packages(corrplot)
